1.顺序链表
    连续分配内存，数据存储关系前后有次序，第一个元素为首地址，查找高效，添加删除效率低。
2.链表
    添加新的指针，指向下一个元素，内存中都不在一起，通过指针联系，添加删除高效，查找效率低；
3.静态链表
    主要理解备用链表的数据链表，链表中第一个看作备用链表的头，返回给可用的下标，第二个看作数链表的头节点（不包含数据），指向数据的开始，
当数据链表的存储的下标为0时候，代表数据结束；
4.循环链表
    循环链表中，尾指针指向了头，这并不意味着该链表没有第一个节点和最后一个节点，所以创建指针的时候要主要头指针的指向；
删除的同时记录上一个指针的位置，方便进行删除；
5.双向链表
    在链表的基础上添加了指向前驱的指针，方便了查找之前的元素，可以理解为以空间换取时间。
6.栈
    栈的原则为先进后出，栈的实现分为顺序栈和链栈，先进去的数据必须等它之后的数据出来之后才可以出来，用于网页浏览，括号匹配等
7.队列
    队列的原则为先进后出，从队尾进入，从队头出，全部元素由队尾入堆，从队头出队。
8.串的三种存储结构
    (1) 定长顺序存储,(2)堆分配存储，(3)块链存储
    定长顺序存储：使用数组存储
    堆分配存储：动态数组，存放在堆的自由存储区
    块链存储：借用链表存储
9.数组和顺序表
    数组：将相同的数据类型存放在一整块内存中，之前没有逻辑关系
    顺序表：为线性表的存储结构，这些元素在物理和逻辑上都有关联。
    用数组来存储的线性表是顺序表
10.二叉树
    完全二叉树，满二叉树
    二叉树都是有序树
    二叉树的性质：
        (1) 二叉树中，第i层最多有2^(i-1)个节点;
        (2) 如果二叉树的深度为k，那么此二叉树最多有(2^k)-1个节点;
        (3) 二叉树中，叶子节点的个数为n,度为2的个位数为m，则m+1 = n; 
    完全二叉树的性质：
        (1)n个节点完全二叉树的深度为[log2(n)]+1;
        (2)对于任意的一个完全二叉树而言，将含有节点按照层次从左到右依次编号，对于任意一个节点i：
            ·当i>1时候，父节点为节点[i/2]
            ·如果2*i > n,该节点没有左孩子，否则的话，左孩子为2*i
            ·如果2*i+1 > n，该节点没有右孩子，否则的话，右孩子为2*i+1
    二叉树的存储分为顺序存储和链式存储
        顺序存储需要将二叉树转换为完全二叉树，根据完全二叉树的第二个特性，将树进行还原
        转化为完全二叉树的时候，会浪费很多没必要的内存空间。不推荐使用顺序存储
    
        链式存储使用指针的形式，分别指向它的左右子树。
    推荐：
        普通二叉树使用链式存储，完全二叉树使用顺序表存储。
        访问父节点频繁使用三叉链表，普通使用二叉链表
    二叉树的遍历分为：
        先序，中序，后序；采用递归可以实现对二叉树的遍历
        